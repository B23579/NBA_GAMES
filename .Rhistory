str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
view(games)
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
view(train_data)
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
view(train_data)
library(caret) # this library will be used to split the data
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .7,
list = FALSE,
times = 1)
Train <- data[ trainIndex,]
Train <- train_data[ trainIndex,]
Valid <- train_data[-trainIndex,]
view(Train)
valid<- train_data[-trainIndex,]
view(valid)
view(Train)
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
view(games)
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .7,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
set.seed(3486)
trainIndex <- createDataPartition(Train$HOME_TEAM_WINS, p = .7,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
valid<- train_data[-trainIndex,]
view(valid)
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
view(train_data)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
set.seed(3486)
trainIndex <- createDataPartition(Train$HOME_TEAM_WINS, p = .80,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
valid<- train_data[-trainIndex,]
view(valid)
view(Train)
model<- lm(HOME_TEAM_WINS~.,Train)
model
library(rpart)
# logistic regression
model<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
# logistic regression
model<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
# logistic regression
model<- makeClassifTask(data=Train, target=HOME_TEAM_WINS)
"
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
library(mlr) # this library will be use to build a model
library(rpart)
library(mlr3) # this library will be use to build a model
library(rpart)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
set.seed(3486)
trainIndex <- createDataPartition(Train$HOME_TEAM_WINS, p = .80,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
valid<- train_data[-trainIndex,]
view(valid)
# logistic regression
model<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
logreg<-makeLearner("classif.logreg")
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
logreg<-makeLearner("classif.logreg")
logregModel<-train(logreg,winner)
# Let's handle missing value
sum(is.na(Train$PTS_home))
# Let's handle missing value
sum(is.na(games$PTS_home))
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(rpart)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# Let's handle missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
na.omit(games)
# number of missing value
sum(is.na(games$PTS_home))
games<-na.omit(games)
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
#in this case we are going to use 1
games<-na.omit(games)
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
view(train_data)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
set.seed(3486)
trainIndex <- createDataPartition(Train$HOME_TEAM_WINS, p = .80,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
valid<- train_data[-trainIndex,]
view(valid)
view(Train)
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
logreg<-makeLearner("classif.logreg")
logregModel<-train(logreg,winner)
# cross-validating our logistic regression model
logRegWropper<-makeImputeWrapper("classif.logreg",cols=list(Age=inputeMean()))
# cross-validating our logistic regression model
logRegWropper<-makeImputeWrapper("classif.logreg",cols=list(Age=imputeMean()))
Kfold <-makeResampleDesc(method = "RepCV",folders=10,reps=50,stratify = TRUE)
Kfold <-makeResampleDesc(method = "RepCV",folds=10,reps=50,stratify = TRUE)
# cross-validating our logistic regression model
logRegWrapper<-makeImputeWrapper("classif.logreg",cols=list(Age=imputeMean()))
Kfold <-makeResampleDesc(method = "RepCV",folds=10,reps=50,stratify = TRUE)
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr,fnr))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold)
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr,fnr))
# cross-validating our logistic regression model
logRegWrapper<-makeImputeWrapper("classif.logreg"))
# cross-validating our logistic regression model
logRegWrapper<-makeImputeWrapper("classif.logreg")
Kfold <-makeResampleDesc(method = "RepCV",folds=10,reps=50,stratify = TRUE)
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr,fnr))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold)
# cross-validating our logistic regression model
logRegWrapper<-makeImputeWrapper("classif.logreg")
Kfold <-makeResampleDesc(method = "RepCV",folds=10,reps=50,stratify = TRUE)
Kfold
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr,fnr))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold)
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr,fnr))
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(rpart)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
#in this case we are going to use 1
games<-na.omit(games)
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
view(train_data)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
set.seed(3486)
trainIndex <- createDataPartition(Train$HOME_TEAM_WINS, p = .80,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
valid<- train_data[-trainIndex,]
view(valid)
view(Train)
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
logreg<-makeLearner("classif.logreg")
logregModel<-train(logreg,winner)
# cross-validating our logistic regression model
logRegWrapper<-makeImputeWrapper("classif.logreg")
Kfold <-makeResampleDesc(method = "RepCV",folds=10,reps=50,stratify = TRUE)
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures=list(acc,fpr,fnr))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures = list(mmce, fpr, fnr, timetrain))
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold)
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures = list(mmce, fpr, fnr, timetrain))
rdesc = makeResampleDesc("CV", iters = 3)
r = resample("regr.lm", winner, rdesc)
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(plyr)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
#in this case we are going to use 1
games<-na.omit(games)
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-GAME_ID,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
view(train_data)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
set.seed(3486)
trainIndex <- createDataPartition(Train$HOME_TEAM_WINS, p = .80,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
valid<- train_data[-trainIndex,]
view(valid)
view(Train)
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
logreg<-makeLearner("classif.logreg")
logregModel<-train(logreg,winner)
# cross-validating our logistic regression model
logRegWrapper<-makeImputeWrapper("classif.logreg")
Kfold <-makeResampleDesc(method = "RepCV",folds=10,reps=50,stratify = TRUE)
Kfold
logRegwithImpute<-resample(logRegWrapper,winner,resampling = Kfold, measures = list(mmce, fpr, fnr, timetrain))
rdesc = makeResampleDesc("CV", iters = 3)
r = resample("regr.lm", winner, rdesc)
rdesc = makeResampleDesc("RepCV", iters = 3)
rdesc = makeResampleDesc("CV", iters = 3)
r = resample("regr.lm", winner, rdesc)
print(logregModel)
####
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
model <- train(HOME_TEAM_WINS~., data=Train, trControl=train_control, method="nb")
# Fit Naive Bayes Model
model <- train(HOME_TEAM_WINS~., data=Train, trControl=train_control, method="classif.logreg")
