fwrite(mergeast,"new_data/east_playoff_sending_score.csv" )
view(mergewest_conference)
view(mergewest_conference)
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games)) +
geom_col(fill = "lightblue", colour = "black")
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games, fill = season)) +
geom_col(position = "dodge")
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games)) +
geom_col(fill = "lightblue", colour = "black")+
facet_grid(. ~ season)
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games)) +
geom_col(fill = "lightblue", colour = "black")+
facet_grid(. ~ season,nrow = 2)
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games)) +
geom_col(fill = "lightblue", colour = "black")+
facet_grid(. ~ season,nrow = 2)+
facet_wrap( ~ season, nrow = 2)
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games)) +
geom_col(fill = "lightblue", colour = "black")+
facet_wrap( ~ season, nrow = 2)
ggplot(mergewest_conference, aes(x = HOME_TEAM_ID, y = number_of_win_games)) +
geom_col(fill = "lightblue", colour = "black")+
facet_wrap( ~ season, nrow = 3)
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
facet_wrap( ~ season, nrow = 3)
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "blue", colour = "black")+
facet_wrap( ~ season, nrow = 3)
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "red", colour = "black")+
facet_wrap( ~ season, nrow = 3)
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "True", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "Predict", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play of")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(name = "Data",
breaks = c( "True","Predict"),
values = c( "True"="lightblue","Predict"="green"),drop=F )
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "True", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "Predict", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play of")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(name = "Data",
breaks = c( "True","Predict"),
values = c( "True"="lightblue","Predict"="green"),drop=F )
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "True", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "Predict", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play of")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(name = "Data",
breaks = c( "True","Predict"),
values = c( "True"="lightblue","Predict"="green"),drop=F )
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "Predict", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play of")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(name = "Data",
breaks = c( "True","Predict"),
values = c( "True"="lightblue","Predict"="green"),drop=F )
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play of")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(name = "Data",
breaks = c( "lightblue","Predict"),
values = c( "True"="lightblue","Predict"="green"),drop=F )
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play of")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to play off")+
theme(plot.title = element_text(hjust = 0.5))
p<- ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
ggsave(p, filename = "result_visualisation/Distribution_of_winning_games.png")
games1<-filter(games,HOME_TEAM_ID %in%("Clippers","Jazz","Rockets","Thunder"))
games1<-filter(games,HOME_TEAM_ID %in%c("Clippers","Jazz","Rockets","Thunder"))
ggplot(games1) +
geom_density(mapping = aes(x = PTS_home,fill=HOME_TEAM_ID),alpha = .3)
games1<-filter(games,games$GAME_DATE_EST>="2016-10-24",HOME_TEAM_ID %in%c("Clippers","Jazz","Rockets","Thunder"))
ggplot(games1) +
geom_density(mapping = aes(x = PTS_home,fill=HOME_TEAM_ID),alpha = .3)
ggplot(games1) +
geom_density(mapping = aes(x = PTS_away,fill=HOME_TEAM_ID),alpha = .3)
p<- ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of west conference teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
ggsave(p, filename = "result_visualisation/Distribution_of_winning_games.png")
p<- ggplot(mergeast) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of east conference teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
ggsave(p, filename = "result_visualisation/east_Distribution_of_winning_games.png")
view(east_conference)
view(mergewest_conference)
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(data.table)
test<-read.csv("new_data/decison_tree_prediction.csv")
test$HOME_TEAM_ID<-as.factor(test$HOME_TEAM_ID)
view(test)
seasaon1<-filter(test, test$GAME_DATE_EST>="2019-10-22",test$GAME_DATE_EST<="2020-08-12")
l<-levels(droplevels(seasaon1$HOME_TEAM_ID))
number_of_win_games<-c()
number_games_play<-c()
pred_numb_win<-c()
for(i in l){
seasaon1%>% filter(seasaon1$HOME_TEAM_ID==i)->a
seasaon1%>% filter(seasaon1$VISITOR_TEAM_ID==i)->c
number_games_play<-append(number_games_play,nrow(c)+nrow(a))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS==1)+ sum(c$HOME_TEAM_WINS==0))
pred_numb_win<-append(pred_numb_win,sum(a$HOME_WIN_PRED==1)+ sum(c$HOME_WIN_PRED==0))
}
seasaon1<-data.frame(HOME_TEAM_ID= l,number_games_play=number_games_play,number_of_win_games=number_of_win_games, pred_numb_win= pred_numb_win,ratio=number_of_win_games/number_games_play)
seasaon1$HOME_TEAM_ID<-as.factor(as.character(seasaon1$HOME_TEAM_ID))
######## prediction ######
nt<-rep(c(2020),times=30)
seasaon1<-mutate(seasaon1, season=nt)
east_conference<- filter(seasaon1,seasaon1$HOME_TEAM_ID %in%c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks",
"Heat" ,"Magic","Wizards","Hornets","Hawks" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID %in% c('Pelicans',"Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
west_conference <-west_conference[order(-west_conference$number_of_win_games),]
east_conference <-east_conference[order(-east_conference$number_of_win_games),]
west_conference<- west_conference[1:8,]
east_conference<- east_conference[1:8,]
view(east_conference)
# use this the the first time you run the code
mergeast<-east_conference
mergewest_conference<-west_conference
seasaon1<-filter(test, test$GAME_DATE_EST>="2016-10-16",test$GAME_DATE_EST<="2020-04-10")
l<-levels(droplevels(seasaon1$HOME_TEAM_ID))
number_of_win_games<-c()
number_games_play<-c()
pred_numb_win<-c()
for(i in l){
seasaon1%>% filter(seasaon1$HOME_TEAM_ID==i)->a
seasaon1%>% filter(seasaon1$VISITOR_TEAM_ID==i)->c
number_games_play<-append(number_games_play,nrow(c)+nrow(a))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS==1)+ sum(c$HOME_TEAM_WINS==0))
pred_numb_win<-append(pred_numb_win,sum(a$HOME_WIN_PRED==1)+ sum(c$HOME_WIN_PRED==0))
}
seasaon1<-data.frame(HOME_TEAM_ID= l,number_games_play=number_games_play,number_of_win_games=number_of_win_games, pred_numb_win= pred_numb_win,ratio=number_of_win_games/number_games_play)
seasaon1$HOME_TEAM_ID<-as.factor(as.character(seasaon1$HOME_TEAM_ID))
######## prediction ######
nt<-rep(c(2019),times=30)
seasaon1<-mutate(seasaon1, season=nt)
east_conference<- filter(seasaon1,seasaon1$HOME_TEAM_ID %in%c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks",
"Heat" ,"Magic","Wizards","Hornets","Hawks" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID %in% c('Pelicans',"Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
west_conference <-west_conference[order(-west_conference$number_of_win_games),]
east_conference <-east_conference[order(-east_conference$number_of_win_games),]
west_conference<- west_conference[1:8,]
east_conference<- east_conference[1:8,]
## run this at the second time you run the code for orther season
mergeast<-rbind(mergeast,east_conference)
mergewest_conference<-rbind(mergewest_conference,west_conference)
view(west_conference)
seasaon1<-filter(test, test$GAME_DATE_EST>="2016-10-24",test$GAME_DATE_EST<="2017-04-12")
l<-levels(droplevels(seasaon1$HOME_TEAM_ID))
number_of_win_games<-c()
number_games_play<-c()
pred_numb_win<-c()
for(i in l){
seasaon1%>% filter(seasaon1$HOME_TEAM_ID==i)->a
seasaon1%>% filter(seasaon1$VISITOR_TEAM_ID==i)->c
number_games_play<-append(number_games_play,nrow(c)+nrow(a))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS==1)+ sum(c$HOME_TEAM_WINS==0))
pred_numb_win<-append(pred_numb_win,sum(a$HOME_WIN_PRED==1)+ sum(c$HOME_WIN_PRED==0))
}
seasaon1<-data.frame(HOME_TEAM_ID= l,number_games_play=number_games_play,number_of_win_games=number_of_win_games, pred_numb_win= pred_numb_win,ratio=number_of_win_games/number_games_play)
seasaon1$HOME_TEAM_ID<-as.factor(as.character(seasaon1$HOME_TEAM_ID))
######## prediction ######
nt<-rep(c(2018),times=30)
######## prediction ######
nt<-rep(c(2017),times=30)
seasaon1<-mutate(seasaon1, season=nt)
east_conference<- filter(seasaon1,seasaon1$HOME_TEAM_ID %in%c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks",
"Heat" ,"Magic","Wizards","Hornets","Hawks" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID %in% c('Pelicans',"Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
west_conference <-west_conference[order(-west_conference$number_of_win_games),]
east_conference <-east_conference[order(-east_conference$number_of_win_games),]
west_conference<- west_conference[1:8,]
east_conference<- east_conference[1:8,]
## run this at the second time you run the code for orther season
mergeast<-rbind(mergeast,east_conference)
# use this the the first time you run the code
mergeast<-east_conference
mergewest_conference<-west_conference
seasaon1<-filter(test, test$GAME_DATE_EST>="2017-10-17",test$GAME_DATE_EST<="2018-04-11")
l<-levels(droplevels(seasaon1$HOME_TEAM_ID))
number_of_win_games<-c()
number_games_play<-c()
pred_numb_win<-c()
for(i in l){
seasaon1%>% filter(seasaon1$HOME_TEAM_ID==i)->a
seasaon1%>% filter(seasaon1$VISITOR_TEAM_ID==i)->c
number_games_play<-append(number_games_play,nrow(c)+nrow(a))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS==1)+ sum(c$HOME_TEAM_WINS==0))
pred_numb_win<-append(pred_numb_win,sum(a$HOME_WIN_PRED==1)+ sum(c$HOME_WIN_PRED==0))
}
seasaon1<-data.frame(HOME_TEAM_ID= l,number_games_play=number_games_play,number_of_win_games=number_of_win_games, pred_numb_win= pred_numb_win,ratio=number_of_win_games/number_games_play)
seasaon1$HOME_TEAM_ID<-as.factor(as.character(seasaon1$HOME_TEAM_ID))
######## prediction ######
nt<-rep(c(2018),times=30)
seasaon1<-mutate(seasaon1, season=nt)
east_conference<- filter(seasaon1,seasaon1$HOME_TEAM_ID %in%c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks",
"Heat" ,"Magic","Wizards","Hornets","Hawks" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID %in% c('Pelicans',"Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
west_conference <-west_conference[order(-west_conference$number_of_win_games),]
east_conference <-east_conference[order(-east_conference$number_of_win_games),]
west_conference<- west_conference[1:8,]
east_conference<- east_conference[1:8,]
## run this at the second time you run the code for orther season
mergeast<-rbind(mergeast,east_conference)
mergewest_conference<-rbind(mergewest_conference,west_conference)
seasaon1<-filter(test, test$GAME_DATE_EST>="2018-10-16",test$GAME_DATE_EST<="2019-04-10")
l<-levels(droplevels(seasaon1$HOME_TEAM_ID))
number_of_win_games<-c()
number_games_play<-c()
pred_numb_win<-c()
for(i in l){
seasaon1%>% filter(seasaon1$HOME_TEAM_ID==i)->a
seasaon1%>% filter(seasaon1$VISITOR_TEAM_ID==i)->c
number_games_play<-append(number_games_play,nrow(c)+nrow(a))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS==1)+ sum(c$HOME_TEAM_WINS==0))
pred_numb_win<-append(pred_numb_win,sum(a$HOME_WIN_PRED==1)+ sum(c$HOME_WIN_PRED==0))
}
seasaon1<-data.frame(HOME_TEAM_ID= l,number_games_play=number_games_play,number_of_win_games=number_of_win_games, pred_numb_win= pred_numb_win,ratio=number_of_win_games/number_games_play)
seasaon1$HOME_TEAM_ID<-as.factor(as.character(seasaon1$HOME_TEAM_ID))
######## prediction ######
nt<-rep(c(2019),times=30)
seasaon1<-mutate(seasaon1, season=nt)
east_conference<- filter(seasaon1,seasaon1$HOME_TEAM_ID %in%c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks",
"Heat" ,"Magic","Wizards","Hornets","Hawks" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID %in% c('Pelicans',"Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
west_conference <-west_conference[order(-west_conference$number_of_win_games),]
east_conference <-east_conference[order(-east_conference$number_of_win_games),]
west_conference<- west_conference[1:8,]
east_conference<- east_conference[1:8,]
## run this at the second time you run the code for orther season
mergeast<-rbind(mergeast,east_conference)
mergewest_conference<-rbind(mergewest_conference,west_conference)
seasaon1<-filter(test, test$GAME_DATE_EST>="2019-10-22",test$GAME_DATE_EST<="2020-08-14")
l<-levels(droplevels(seasaon1$HOME_TEAM_ID))
number_of_win_games<-c()
number_games_play<-c()
pred_numb_win<-c()
for(i in l){
seasaon1%>% filter(seasaon1$HOME_TEAM_ID==i)->a
seasaon1%>% filter(seasaon1$VISITOR_TEAM_ID==i)->c
number_games_play<-append(number_games_play,nrow(c)+nrow(a))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS==1)+ sum(c$HOME_TEAM_WINS==0))
pred_numb_win<-append(pred_numb_win,sum(a$HOME_WIN_PRED==1)+ sum(c$HOME_WIN_PRED==0))
}
seasaon1<-data.frame(HOME_TEAM_ID= l,number_games_play=number_games_play,number_of_win_games=number_of_win_games, pred_numb_win= pred_numb_win,ratio=number_of_win_games/number_games_play)
seasaon1$HOME_TEAM_ID<-as.factor(as.character(seasaon1$HOME_TEAM_ID))
######## prediction ######
nt<-rep(c(2020),times=30)
seasaon1<-mutate(seasaon1, season=nt)
east_conference<- filter(seasaon1,seasaon1$HOME_TEAM_ID %in%c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks",
"Heat" ,"Magic","Wizards","Hornets","Hawks" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID %in% c('Pelicans',"Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
west_conference <-west_conference[order(-west_conference$number_of_win_games),]
east_conference <-east_conference[order(-east_conference$number_of_win_games),]
west_conference<- west_conference[1:8,]
east_conference<- east_conference[1:8,]
## run this at the second time you run the code for orther season
mergeast<-rbind(mergeast,east_conference)
mergewest_conference<-rbind(mergewest_conference,west_conference)
view(mergewest_conference)
fwrite(mergewest_conference,"new_data/west_playoff_sending_score.csv" )
fwrite(mergeast,"new_data/east_playoff_sending_score.csv" )
p<- ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of west conference teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
p<- ggplot(mergewest_conference) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 4)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of west conference teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
ggsave(p, filename = "result_visualisation/Distribution_of_winning_games.png")
p<- ggplot(mergeast) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 3)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of east conference teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
p<- ggplot(mergeast) +
geom_col(aes(x = HOME_TEAM_ID, y = number_of_win_games),fill = "lightblue", colour = "black")+
geom_col(aes(x = HOME_TEAM_ID, y = pred_numb_win),fill = "green", colour = "black")+
facet_wrap( ~ season, nrow = 4)+
labs(x=" Teams sending to playoff", y= "Number of winning games ", title = "Distribution of winning games of east conference teams sending to playoff")+
theme(plot.title = element_text(hjust = 0.5))
p
ggsave(p, filename = "result_visualisation/east_Distribution_of_winning_games.png")
boxplot(abs(mergeast$number_of_win_games-mergeast$pred_numb_win))
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(data.table)
library(caret) # this library will be used to split the data
library(mlr) # this library will be use to build a model
games<-read.csv("new_data/games_with_all_stat.csv")
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
names(train_data)
train_data<-select(train_data,HOME_TEAM_ID,PTS_home,VISITOR_TEAM_ID,VISITOR_TEAM_ID,HOME_TEAM_WINS)
view(train_data)
train_data<-select(train_data,HOME_TEAM_ID,PTS_home,PTS_away,VISITOR_TEAM_ID,VISITOR_TEAM_ID,HOME_TEAM_WINS)
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
# feature extraction,
names(train_data)
train_data<-select(train_data,HOME_TEAM_ID,PTS_home,PTS_away,VISITOR_TEAM_ID,VISITOR_TEAM_ID,HOME_TEAM_WINS)
view(train_data)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
# let's visualize the distribution of data
sum(Train$HOME_TEAM_WINS==1)
sum(Train$HOME_TEAM_WINS==0)
sum(Train$HOME_TEAM_WINS==0)-sum(Train$HOME_TEAM_WINS==1)
#################Decision tree##############################
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
train_data<-select(train_data,HOME_TEAM_ID,VISITOR_TEAM_ID,VISITOR_TEAM_ID,HOME_TEAM_WINS)
view(train_data)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
# let's visualize the distribution of data
sum(Train$HOME_TEAM_WINS==1)
sum(Train$HOME_TEAM_WINS==0)
sum(Train$HOME_TEAM_WINS==0)-sum(Train$HOME_TEAM_WINS==1)
#################Decision tree##############################
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
train_data$HOME_TEAM_ID<-as.factor(train_data$HOME_TEAM_ID)
train_data$HOME_TEAM_WINS<-as.factor(train_data$VISITOR_TEAM_ID)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
# let's visualize the distribution of data
sum(Train$HOME_TEAM_WINS==1)
sum(Train$HOME_TEAM_WINS==0)
sum(Train$HOME_TEAM_WINS==0)-sum(Train$HOME_TEAM_WINS==1)
#################Decision tree##############################
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
#################Decision tree##############################
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
train_data$HOME_TEAM_WINS<-as.factor(as.character(train_data$VISITOR_TEAM_ID))
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
# let's visualize the distribution of data
sum(Train$HOME_TEAM_WINS==1)
sum(Train$HOME_TEAM_WINS==0)
sum(Train$HOME_TEAM_WINS==0)-sum(Train$HOME_TEAM_WINS==1)
#################Decision tree##############################
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
#################Decision tree##############################
winner<- makeClassifTask(data=Train, target="HOME_TEAM_WINS")
tree <- makeLearner("classif.rpart")
getParamSet(tree)
treeParamSpace <- makeParamSet(
makeIntegerParam("minsplit", lower = 5, upper = 20),
makeIntegerParam("minbucket", lower = 3, upper = 10),
makeNumericParam("cp", lower = 0.01, upper = 0.1),
makeIntegerParam("maxdepth", lower = 3, upper = 10))
### Defining the random search
randSearch <- makeTuneControlRandom(maxit = 200)
cvForTuning <- makeResampleDesc("CV", iters = 5)
library(parallel)
library(parallelMap)
parallelStartSocket(cpus = detectCores())
tunedTreePars <- tuneParams(tree, task = winner,
resampling = cvForTuning,
par.set = treeParamSpace,
control = randSearch)
parallelStop()
tunedTreePars
## Training the model with the tuned hyperparameters
tunedTree <- setHyperPars(tree, par.vals = tunedTreePars$x)
tunedTreeModel <- train(tunedTree, winner)
## prediction
predicted<-predict(tunedTreeModel, newdata = test_data)
test_data <- train_data[-trainIndex,] # this data will be use to test the model
model<-lm(HOME_TEAM_WINS~.,Train)
model
predicted<-predict(model, newdata = test_data)
predicted[predicted>=0.5]=1
predicted[predicted<0.5]=0
example <- confusionMatrix(data=as_factor(predicted), reference = as_factor(test$HOME_TEAM_WINS))
#Display results
example
#Display results
predicted
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr)
library(data.table)
games<-read.csv("new_data/games_with_all_stat.csv")
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
view(train_data)
# feature extraction,
names(train_data)
train_data<-select(train_data,-GAME_DATE_EST,-VISITOR_TEAM_ID, -SEASON,-HOME_TEAM_ID)
set.seed(3456)
trainIndex <- createDataPartition(train_data$HOME_TEAM_WINS, p = .85,
list = FALSE,
times = 1)
Train <- train_data[ trainIndex,]
test_data <- train_data[-trainIndex,] # this data will be use to test the model
nrow(test_data)
nrow(Train)
library(Boruta)
library(mlbench)
library(randomForest)
set.seed(111)
boruto<-Boruta(HOME_TEAM_WINS~.,data = Train,doTrace=2, maxRuns=100)
print(boruto)
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(data.table)
test<-read.csv("new_data/decison_tree_prediction.csv")
test$HOME_TEAM_ID<-as.factor(test$HOME_TEAM_ID)
view(test)
seasaon1<-filter(test, test$GAME_DATE_EST>="2019-10-22",test$GAME_DATE_EST<="2020-08-14")
boxplot(abs(mergeast$number_of_win_games-mergeast$pred_numb_win))
boxplot(abs(mergewest_conference$number_of_win_games-mergewest_conference$pred_numb_win))
