library(tidyverse)
Team_ranking<-as_tibble(read.csv("data/ranking.csv"))
a<-nrow(Team_ranking)
Home_record<- str_split(Team_ranking$HOME_RECORD, "-")
road_record<- str_split(Team_ranking$ROAD_RECORD, "-")
Home_score<-vector()
Adverse_Home_score<-vector()
abroad_score<-vector()
Adverse_Road<-vector()
for(i in 1:a){
Home_score <-append(Home_score,Home_record[[i]][1])
Adverse_Home_score <-append(Adverse_Home_score,Home_record[[i]][2])
abroad_score <-append(abroad_score,road_record[[i]][1])
Adverse_Road <-append(Adverse_Road,road_record[[i]][2])
}
Home_score<-as.numeric(Home_score)
Adverse_Home_score<-as.numeric(Adverse_Home_score)
abroad_score<-as.numeric(abroad_score)
Adverse_Road<-as.numeric(Adverse_Road)
Team_ranking$TEAM <-as_factor(Team_ranking$TEAM)
levels(Team_ranking$TEAM)
team <-select(Team_ranking,G,W,L,W_PCT)
team$G <-as.numeric(team$G)
team$W <-as.numeric(team$W)
team$L <-as.numeric(team$L)
team$W_PCT <-as.numeric(team$W_PCT)
team<-mutate(team,Home_score,abroad_score,abroad_score,Adverse_Home_score,Adverse_Road)
names(team)
str(team)
## save wraggling data as csv file
write.csv2(team, "new_data/team.csv")
team<-data.frame(team)
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(mlr)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
#in this case we are going to use 1
games<-na.omit(games)
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
train_data<- filter(games,games$GAME_DATE_EST<"2016-10-24")
seasaon1<-filter(test, test$GAME_DATE_EST>="2016-10-24",test$GAME_DATE_EST<="2017-04-14")
view(seasaon1)
east_conference<- filter(seasaon1,HOME_TEAM_ID==c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks","Hawks",
"Heat" ,"Magic","Wizards","Hornets" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID==c("Pelicans","Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
view(west_conference)
# Let's count the number of winning games of each team.
str(west_conference)
west_conference %>%
group_by(HOME_TEAM_ID)%>%summarise(num = sum(HOME_TEAM_WINS))->l
view(l)
levels(west_conference$HOME_TEAM_ID)
levels(west_conference$HOME_TEAM_ID)[1]
t<-levels(west_conference$HOME_TEAM_ID)
t
t[1]
print(i)}
for(i in t){
print(i)
}
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)%>%summarise(west_conference$HOME_TEAM_WINS)
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)%>%sum(west_conference$HOME_TEAM_WINS)
print(a)
for(i in t){
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)%>%sum(west_conference$HOME_TEAM_WINS)->a
print(a)
}
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)->a
a
print(sum(a$HOME_TEAM_WINS))
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS))
number_of_win_games<-c()
for(i in t){
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)->a
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS))
}
number_of_win_games
lenght(number_of_win_games)
length(number_of_win_games)
west_conference<- filter(seasaon1,HOME_TEAM_ID==c("Pelicans","Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
t<-levels(west_conference$HOME_TEAM_ID)
number_of_win_games<-c()
for(i in t){
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)->a
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS))
}
length(number_of_win_games)
view(east_conference)
t
east_conference<- filter(seasaon1,HOME_TEAM_ID==c("Celtics","Nets","Knicks","76ers","Raptors","Bulls",
"Cavaliers" ,"Pistons","Pacers","Bucks","Hawks",
"Heat" ,"Magic","Wizards","Hornets" ))
west_conference<- filter(seasaon1,HOME_TEAM_ID==c("Pelicans","Mavericks","Nuggets","Warriors",
"Rockets","Clippers","Lakers","Timberwolves",
"Suns","Trail Blazers", "Kings","Spurs","Thunder",
"Jazz","Grizzlies"))
t<-levels(west_conference$HOME_TEAM_ID)
number_of_win_games<-c()
for(i in t){
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)->a
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS))
}
length(number_of_win_games)
t
view(east_conference)
t<-levels(droplevel(west_conference$HOME_TEAM_ID))
t<-levels(droplevels(west_conference$HOME_TEAM_ID))
number_of_win_games<-c()
for(i in t){
west_conference%>% filter(west_conference$HOME_TEAM_ID==i)->a
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS))
}
length(number_of_win_games)
t
view(number_of_win_games)
weast_season<-data.frame(HOME_TEAM_ID= t,number_of_win_games=number_of_win_games)
view(weast_season)
t<-levels(droplevels(east_conference$HOME_TEAM_ID))
number_of_win_games<-c()
for(i in t){
east_conference%>% filter(east_conference$HOME_TEAM_ID==i)->a
number_of_win_games<-append(number_of_win_games,sum(a$HOME_TEAM_WINS))
}
east_season<-data.frame(HOME_TEAM_ID= t,number_of_win_games=number_of_win_games)
view(east_season)
# since we are predicted the winner teams, the missing value will affect the prediction, however, for
# prediction of the team which will will win the season, it is important to find the right missing value to be accurate
games<-impute(games, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(mlr)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
# since we are predicted the winner teams, the missing value will affect the prediction, however, for
# prediction of the team which will will win the season, it is important to find the right missing value to be accurate
games<-impute(games, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
test<- filter(games,games$GAME_DATE_EST>="2016-10-24")
view(games)
# in this case we used inputation methode because each games is important
games<-data.frame(impute(games, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean())))
# in this case we used inputation methode because each games is important
games<-as_tibble(impute(games, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean())))
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(mlr)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
# in this case we used inputation methode because each games is important
games<-as_tibble(impute(games, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean())))
# in this case we used inputation methode because each games is important
games<-impute(games, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
typeof(games)
# in this case we used inputation methode because each games is important
games<-impute(games, cols = as_tibble(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
# in this case we used inputation methode because each games is important
games<-impute(games, cols = as_tibble(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
# in this case we used inputation methode because each games is important
games<-impute(games, cols = data.frame(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
# in this case we used inputation methode because each games is important
games<-impute(games, cols = as_tibble_col(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
# in this case we used inputation methode because each games is important
games$PTS_home<-impute(games$PTS_home, cols = list(PTS_home = imputeMean()))
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(mlr)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
# in this case we used inputation methode because each games is important
games$PTS_home<-impute(games$PTS_home, cols = list(PTS_home = imputeMean()))
# in this case we used inputation methode because each games is important
games<-impute(games$PTS_home, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
setwd("D:/competition kaggle/NBA_GAMES")
library(tidyverse)
library(caret) # this library will be used to split the data
library(mlr3) # this library will be use to build a model
library(plyr)
library(mlr)
Team<-as_tibble(read.csv("data/teams.csv"))
games<-as_tibble(read.csv("data/games.csv"))
str(Team)
games$HOME_TEAM_ID<-as_factor(games$HOME_TEAM_ID)
games$TEAM_ID_away<-as_factor(games$TEAM_ID_away)
games$VISITOR_TEAM_ID<-as_factor(games$VISITOR_TEAM_ID)
games$TEAM_ID_home<-as_factor(games$TEAM_ID_home)
games$GAME_STATUS_TEXT<-as_factor(games$GAME_STATUS_TEXT)
games$GAME_DATE_EST<-as.Date(games$GAME_DATE_EST)
fact<-c()
for (i in 1:30){
l = as.numeric(levels(games$HOME_TEAM_ID)[i])
l = which(Team$TEAM_ID==l)
fact<-append(fact,Team$NICKNAME[l])
}
games$HOME_TEAM_ID <- mapvalues(games$HOME_TEAM_ID, from = levels(games$HOME_TEAM_ID), to=fact)
games$TEAM_ID_away <- mapvalues(games$TEAM_ID_away, from = levels(games$TEAM_ID_away), to=fact)
games$VISITOR_TEAM_ID <- mapvalues(games$VISITOR_TEAM_ID, from = levels(games$VISITOR_TEAM_ID), to=fact)
games$TEAM_ID_home <- mapvalues(games$TEAM_ID_home, from = levels(games$TEAM_ID_home), to=fact)
# count the number of duplicate number
sum(duplicated(games$GAME_ID))
#remove duplicated number
games<- games[!duplicated(games$GAME_ID),]
# Let's check whether we still have duplicate row
sum(duplicated(games$GAME_ID))
games<-select(games,-GAME_STATUS_TEXT,-TEAM_ID_home,-TEAM_ID_away,-PTS_away,
-FG_PCT_away,-FT_PCT_away,-FG3_PCT_away,-AST_away,-REB_away )
# number of missing value
sum(is.na(games$PTS_home))
sum(is.na(games$FG_PCT_home))
sum(is.na(games$FT_PCT_home))
sum(is.na(games$FG3_PCT_home))
sum(is.na(games$REB_home))
sum(is.na(games$HOME_TEAM_WINS))
# in this case we used inputation methode because each games is important
games<-impute(games$PTS_home, cols = list(PTS_home = imputeMean(),FG_PCT_home = imputeMean(),FT_PCT_home= imputeMean(),
FG3_PCT_home= imputeMean(),REB_home=imputeMean(),HOME_TEAM_WINS=imputeMean()))
